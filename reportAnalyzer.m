% Report Analyzer
% reportAnalyzer.m
%
%  2023-09-21 (mduhain): Created file for analyzing the 'surf reports'
%  generated by 'dataSurfer.m'. Musty be flexible to handle both PV and Red
%  experiments.
%
%
%

%% HARD CODED VARIABLES
%frequency list
freqList = [100,300,500,700,900,1100];
creDepMice = ["m126","m792"];


%% LOAD REPORT
startingDir = pwd;
disp("Which report should be loaded...?");
[selectedReport,reportLocation] = uigetfile();
cd(reportLocation);
R = load(selectedReport);
folderNames = strsplit(reportLocation,'\');
folderName = folderNames{end-1};
%remove the variable name in the report
if isstruct(R)
    R = R.(string(fieldnames(R)));
end

%% CHECK REPORT FOR ACCURACY
usableRows = [1,size(R,1)];
for n = 1 : size(R,1) %loop through all rows
    if R{n,8} == 0 %if non-responsive
        R{n,9} = 0; %selectivity is 0
        R{n,10} = 0; %pref. freq. is 0
    end
    if isempty(R{n,1}) && isempty(R{n,4})
        %first empty row found
        usableRows(2) = n-1;
        break;
    end
    if R{n,9} == 1
        listedFreq = R{n,10};
        respFreqs = freqList(R{n,4}.respFreqZP(:,2)<0.05);
        [~,foundIndx] = max(R{n,4}.avgRespPost(R{n,4}.respFreqZP(:,2)<0.05));
        foundFreq = respFreqs(foundIndx);
        if foundFreq ~= listedFreq
            disp(strcat('corrected pref. Freq, row ',num2str(n)));
            R{n,10} = foundFreq;
        end
    end
end
R = R(usableRows(1):usableRows(2),:);

%% Calculate Logical Indexes for ROI identities
sessionIDs = unique([R{:,7}]);
for n = 1 : length(sessionIDs) %loop through each unique session
     %extract mouse number
    splits = strsplit(sessionIDs(n),'_');
    sessionIDs(n) = splits(1);
end
mouseNums = unique(sessionIDs);
sessionIDs = unique([R{:,7}]);
isMouse = false(length(R),length(mouseNums)); % R row number, Mouse ID
isSessID = false(length(R),length(sessionIDs)); % R row number, Session ID
isRed = false(length(R),1);
for n = 1 : length(R)
    if ~isempty(R{n,1})
        if any(contains(R{n,7},creDepMice))
            isRed(n) = 1;
        end
        if string(R{n,1}) == "Overlap"
            isRed(n) = 1;
        end
        %fill logical array indicating mouse number & sessionID
        thisSess = R{n,7};
        splits = strsplit(thisSess,'_');
        thisMouse = splits(1);
        isMouse(n,:) = mouseNums == thisMouse; 
        isSessID(n,:) = sessionIDs == thisSess;
    end
end
isResp = logical([R{:,8}]');
isSel = logical([R{:,9}]');



%% Count Overall Numbers from Logicals
numRed = sum(isRed);
numRespRed = sum([R{isRed,8}]);
numSelRed = sum([R{isRed,9}]);
numGreen = sum(isRed == 0);
numRespGreen = sum([R{~isRed,8}]);
numSelGreen = sum([R{~isRed,9}]);


%% SEL & RESP for ALL NEURONS
if contains(folderName,'Som')
    titleIn = "Catagorization of All Neurons from Som-tdTom Mice";
elseif contains(folderName,'Pv') && contains(folderName,'pre')
    titleIn = "Catagorization of All Neurons from PV-tdTom Mice (Pre-Training)";
elseif contains(folderName,'Pv') && contains(folderName,'post')
    titleIn = "Catagorization of All Neurons from PV-tdTom Mice (Post-Training)";
end
f0 = figure('Color',[1 1 1]);
f0.Position = [200,200,1000,700];
ax = gca;
calcRespSel(numRed,numGreen,numRespRed,numRespGreen,numSelRed,numSelGreen,titleIn,ax);


%% SEL & RESP for EACH MOUSE
figure('Color',[1 1 1]);
for n = 1 : length(mouseNums)
    LOCnumRed = sum(isRed & isMouse(:,n));
    LOCnumRespRed = sum([R{isRed & isMouse(:,n),8}]);
    LOCnumSelRed = sum([R{isRed & isMouse(:,n),9}]);
    LOCnumGreen = sum(~isRed & isMouse(:,n));
    LOCnumRespGreen = sum([R{~isRed & isMouse(:,n),8}]);
    LOCnumSelGreen = sum([R{~isRed & isMouse(:,n),9}]);
    titleIn = ["Catagorization of Neurons from ",mouseNums(n)];
    ax1 = subplot(2,2,n);
    calcRespSel(LOCnumRed,LOCnumGreen,LOCnumRespRed,LOCnumRespGreen,LOCnumSelRed,LOCnumSelGreen,titleIn,ax1);
end


%% FREQ DISTRIBUTION for ALL MICE
f1 = figure;
RedPrefFreq = [R{isRed,10}];
RedPrefFreq(RedPrefFreq == 0) = [];
subplot(1,2,1);
bar(100:200:1100,histcounts(RedPrefFreq,length(freqList))./numRespRed);
title(strcat("Pref. Freq. for ",num2str(numRespRed)," RFP+ Neurons"));
xlabel('Frequency (Hz)');
ylabel('Percentage of Neurons');
greenPrefFreq = [R{~isRed,10}];
greenPrefFreq(greenPrefFreq == 0) = [];
subplot(1,2,2);
bar(100:200:1100,histcounts(greenPrefFreq,length(freqList))./numRespGreen);
title(strcat("Pref. Freq. for ",num2str(numRespGreen)," RFP- Neurons"));
xlabel('Frequency (Hz)');
ylabel('Number of Neurons');


%% FREQ DISTRIBUTION for EACH MOUSE
f2 = figure;
for n = 1 : length(mouseNums)
    subplot(2,2,n)
    numRespRedLoc = sum(isRed & isMouse(:,n));
    numRespGreenLoc = sum(~isRed & isMouse(:,n));
    RedPrefFreq = [R{isRed & isMouse(:,n),10}];
    RedPrefFreq(RedPrefFreq == 0) = [];
    greenPrefFreq = [R{~isRed & isMouse(:,n),10}];
    greenPrefFreq(greenPrefFreq == 0) = [];
    percsRed = (histcounts(RedPrefFreq,6)./numRespRedLoc)';
    percsGreen = (histcounts(greenPrefFreq,6)./numRespGreenLoc)';
    bar(100:200:1100,[percsGreen percsRed]);
    title(strcat("Pref. Freq. of RFP-/+ Neurons from ",mouseNums(n)));
    xlabel('Frequency (Hz)');
    ylabel('Percentage of Neurons');
    legend({'RFP-', 'RFP+'});
end
f2.Position = [200,200,1000,700];


%% CORRELATIONS BY CELL SUBTYPE
rValsGFP = [];
rValsRFP = [];
rValsBetween = [];
for n = 1 : length(sessionIDs)
    % RFP+ : RFP+
    if sum(isSessID(:,n)&isRed) > 1 %at least 2 RFP+ neurons exist 
        corrMat = locCorr(R(isSessID(:,n)&isRed,4),freqList,1);
        rValsRFP = [rValsRFP; corrMat(~isnan(corrMat(:,:,1)))];
    end
    % RFP- : RFP-
    if sum(isSessID(:,n)&~isRed) > 1 %at least 2 RFP- neurons exist 
        corrMat = locCorr(R(isSessID(:,n)&~isRed,4),freqList,1);
        rValsGFP = [rValsGFP; corrMat(~isnan(corrMat(:,:,1)))];
    end
    % RFP+ : RFP- 
    if sum(isSessID(:,n)&~isRed) > 0 && sum(isSessID(:,n)&isRed) > 0
        % at least one of each exist
        corrMat = locCorr(R(isSessID(:,n),4),freqList,0);
        isRedLocal = isRed(isSessID(:,n));
        corrs = corrMat(isRedLocal,~isRedLocal,1);
        corrs = reshape(corrs,[size(corrs,1)*size(corrs,2),1]);
        rValsBetween = [rValsBetween; corrs];
    end
end
%plotting
figure;
violin({rValsRFP, rValsGFP, rValsBetween});
ylabel('Pearson R Values');
ax = gca;
ax.XTick = [1,2,3];
ax.XTickLabels = {'RFP+', 'RFP-', 'RFP+:RFP-'};
title("Neural Correlations by Cell Type");


%% CORRELATIONS BY CELL SUBTYPE & SELECTIVITY
rValsGFP = []; rValsGFPSel = []; %GFP Non-Selective/Selective
rValsRFP = []; rValsRFPSel = []; %RFP Non-Selective/Selective
rValsBetween = []; rValsBetweenSel = []; %GFP:RFP Non-Sel/Sel
for n = 1 : length(sessionIDs)
    % RFP+ : RFP+ (Non-selective)
    if sum(isSessID(:,n) & isRed & ~isSel) > 1 %at least 2 Non-Selective RFP+ neurons exist 
        corrMat = locCorr(R(isSessID(:,n) & isRed & ~isSel,4),freqList,1);
        rValsRFP = [rValsRFP; corrMat(~isnan(corrMat(:,:,1)))];
    end
    % RFP+ : RFP+ (Selective)
    if sum(isSessID(:,n) & isRed & isSel) > 1 %at least 2 Selective RFP+ neurons exist 
        corrMat = locCorr(R(isSessID(:,n) & isRed & isSel,4),freqList,1);
        rValsRFPSel = [rValsRFPSel; corrMat(~isnan(corrMat(:,:,1)))];
    end
    % RFP- : RFP- (Non-Selective)
    if sum(isSessID(:,n) & ~isRed & ~isSel) > 1 %at least 2 Non-Selective RFP- neurons exist 
        corrMat = locCorr(R(isSessID(:,n) & ~isRed & ~isSel,4),freqList,1);
        rValsGFP = [rValsGFP; corrMat(~isnan(corrMat(:,:,1)))];
    end
    % RFP- : RFP- (Selective)
    if sum(isSessID(:,n) & ~isRed & isSel) > 1 %at least 2 Selective RFP- neurons exist 
        corrMat = locCorr(R(isSessID(:,n) & ~isRed & isSel,4),freqList,1);
        rValsGFPSel = [rValsGFPSel; corrMat(~isnan(corrMat(:,:,1)))];
    end
    % RFP+ : RFP- (Non-Selective)
    if sum(isSessID(:,n)&~isRed&~isSel) > 0 && sum(isSessID(:,n)&isRed&~isSel) > 0
        % at least one of each exist
        corrMat = locCorr(R(isSessID(:,n),4),freqList,0);
        isRedLocal = isRed(isSessID(:,n)) & ~isSel(isSessID(:,n));
        isGreenLocal = ~isRed(isSessID(:,n)) & ~isSel(isSessID(:,n));    
        corrs = corrMat(isRedLocal,isGreenLocal,1);
        corrs = reshape(corrs,[size(corrs,1)*size(corrs,2),1]);
        rValsBetween = [rValsBetween; corrs];
    end
    % RFP+ : RFP- (Selective)
    if sum(isSessID(:,n)&~isRed&isSel) > 0 && sum(isSessID(:,n)&isRed&isSel) > 0
        % at least one of each exist
        corrMat = locCorr(R(isSessID(:,n),4),freqList,0);
        isRedLocal = isRed(isSessID(:,n)) & isSel(isSessID(:,n));
        isGreenLocal = ~isRed(isSessID(:,n)) & isSel(isSessID(:,n));    
        corrs = corrMat(isRedLocal,isGreenLocal,1);
        corrs = reshape(corrs,[size(corrs,1)*size(corrs,2),1]);
        rValsBetweenSel = [rValsBetweenSel; corrs];
    end
end
%plotting
figure('Color',[1 1 1]);
forplotting = {rValsRFP,rValsRFPSel,rValsGFP,rValsGFPSel,rValsBetween,rValsBetweenSel};
colorMat = [1 0.5 0; 0.5 1 0; 1 0.5 0; 0.5 1 0; 1 0.5 0; 0.5 1 0];
violin(forplotting,'facecolor',colorMat); hold on;
ylabel('Pearson R Values');
ax = gca;
plot([2.5 2.5],ax.YLim,'k-'); plot([4.5 4.5],ax.YLim,'k-');
ax.XTick = [1.5,3.5,5.5];
ax.XTickLabels = {'RFP+', 'RFP-', 'RFP+:RFP-'};
legend({'Non-Selective','Mean','Median','Selective'});
title("Neural Correlations by Cell Type");


%% CORRELATIONS BY SOMAL DISTANCE
rValsDist = NaN(200000,2); % R val, inter-somal distance
counter = 1;
for n = 1 : length(sessionIDs)
    corrMat = locCorr(R(isSessID(:,n),4),freqList,1);
    somaLocs = R(isSessID(:,n),2);
    for i = 2 : sum(isSessID(:,n)) %corr Mat Loop
        for j = 1 : i-1
            rValsDist(counter,1) = corrMat(i,j); %R vals
            rValsDist(counter,2) = pdist([somaLocs{i};somaLocs{j}]); %dist
            counter = counter + 1;
        end
    end
    pause(0);
end
rValsDist(isnan(rValsDist)) = []; %remove NaNs
rValsDist = reshape(rValsDist,[size(rValsDist,2)/2,2]); 
%plotting
figure('Color',[1 1 1]);
plot(rValsDist(:,2),rValsDist(:,1),'k.','MarkerSize',4);
title("Pearson Correlation by Distance");
ylabel("R Value");
xlabel("Inter-somal euclidian distance (pixels)");  


%% CORRELATIONS BY FREQ (req. selective neurons)
rValsFreq = NaN(100000,2); % R val, deltaF
counter = 1;
for n = 1 : length(sessionIDs)
    if sum(isSel(isSessID(:,n))) > 1
        corrMat = locCorr(R(isSessID(:,n),4),freqList,1);
        isSelLoc = isSel(isSessID(:,n));
        freqLoc = R(isSessID(:,n),10);
        for i = 2 : size(corrMat,1) %corr Mat Loop
            for j = 1 : i-1
                if isSelLoc(i) == 1 && isSelLoc(j) == 1
                    rValsFreq(counter,1) = corrMat(i,j); %R vals
                    rValsFreq(counter,2) = abs(freqLoc{i}-freqLoc{j});
                    counter = counter + 1;
                end
            end
        end
    end
end
rValsFreq(isnan(rValsFreq)) = []; %remove NaNs
rValsFreq = reshape(rValsFreq,[size(rValsFreq,2)/2,2]); 
freqDiffs = unique(rValsFreq(:,2));
respPerFreq = cell(1,6);
for n = 1 : length(freqList)
    respPerFreq{n} = rValsFreq(rValsFreq(:,2) == freqDiffs(n),1);
end
%plotting
figure('Color',[1 1 1]);
violin(respPerFreq);
ax2 = gca;
ax2.XTickLabel = {'0','200','400','600','800','1000'};
title("Pearson Correlation by Difference of Pref. Freq.");
ylabel("R Value");
xlabel("Difference in Preffered Frequency (Hz)");


%% SVD SECTION by response win 1sec post-stim

for n = 1 : length(sessionIDs) %unique sessions
    [sessIndx,~] = find(isSessID(:,n));
    sessResps = NaN(300,length(sessIndx));
    sessFreqs = false(300,length(freqList));
    for m = 1 : sum(isSessID(:,n)) %num rois in each session
        pS = 1; %start position
        resps1 = NaN(300,1);
        for f = 1 : length(freqList) %each freq 
            fldName = ['f',num2str(freqList(f))];
            rS = R{sessIndx(m),4}.(fldName).avgRespPostStim;
            resps1(pS:pS+length(rS)-1) = rS;
            if m == 1
                sessFreqs(pS:pS+length(rS)-1,f) = ones(size(rS));
            end
            pS = pS + length(rS);
        end
        sessResps(:,m) = resps1;
    end
    sessFreqs = sessFreqs(any(sessFreqs,2),:);
    sessResps = sessResps(any(sessResps,2),:);
    [U,S,V] = svd(sessResps'*sessFreqs);
    f1 = figure('Color',[1,1,1]); hold on;
    subplot(1,3,1); imagesc(U); title("U");
    subplot(1,3,2); imagesc(S); title("S");
    subplot(1,3,3); imagesc(V); title("V");
    hold off;
    f1.Position = [200, 200, 1200, 400];
    savefig(strcat("SVD_",sessionIDs(n),'.fig'));
    close all
end


%% SVD SECTION raw traces

for n = 1 : length(sessionIDs)
    respArray = R(isSessID(:,n),5);
    rawTraces = cell2mat(respArray)';
    [indx,~] = find(isSessID(:,n));
    logFreqPres = zeros(size(rawTraces,1),length(freqList));
    for m = 1 : length(freqList)
        thisFreq = R{indx(1),4}.stimFreqs == freqList(m);
        thisFreqFrames = R{indx(1),4}.stimOnFrameNum(thisFreq);
        if max(thisFreqFrames) - min(thisFreqFrames) > size(rawTraces,1)
            thisFreqFrames = round(thisFreqFrames ./ 3);
            thisFreqFrames(thisFreqFrames == 0) = [];
        end
        for i = 1 : length(thisFreqFrames)
            logFreqPres(thisFreqFrames(i):thisFreqFrames(i)+10,m) = 1;
        end
    end
    [U,S,V] = svd(rawTraces);

end


%% Basement Functions
%--------------------------------------------------------------------------

function [] = calcRespSel(numRed,numGreen,numRespRed,numRespGreen,numSelRed,numSelGreen,titleIn,ax)
% a function to visualize the distributions of Responsivity and Selectivity

numNonRespRed = numRed - numRespRed;
numNonSelRed = numRespRed - numSelRed;
numNonRespgreen = numGreen - numRespGreen;
numNonSelgreen = numRespGreen - numSelGreen;

axes(ax); hold on;
b0 = bar(1,[numRespRed/numRed numNonRespRed/numRed],'grouped');
b0(1,1).FaceColor = [0 0.4470 0.7410];
b0(1,2).FaceColor = [0 0.4470 0.7410] .* 0.5;
stdVal0 = mannyPropSTD(numRespRed,numRed);
text(b0(1,1).XEndPoints,b0(1,1).YEndPoints+stdVal0,string(strcat("n=",num2str(numRespRed))),...
    'HorizontalAlignment','center','VerticalAlignment','bottom');
text(b0(1,2).XEndPoints,b0(1,2).YEndPoints+stdVal0,string(strcat("n=",num2str(numNonRespRed))),...
    'HorizontalAlignment','center','VerticalAlignment','bottom');

b1 = bar(2,[numSelRed/numRespRed numNonSelRed/numRespRed],'grouped');
b1(1,1).FaceColor = [0.4660 0.6740 0.1880];
b1(1,2).FaceColor = [0.4660 0.6740 0.1880] .* 0.5;
stdVal1 = mannyPropSTD(numSelRed,numRed);
text(b1(1,1).XEndPoints,b1(1,1).YEndPoints+stdVal1,string(strcat("n=",num2str(numSelRed))),...
    'HorizontalAlignment','center','VerticalAlignment','bottom');
text(b1(1,2).XEndPoints,b1(1,2).YEndPoints+stdVal1,string(strcat("n=",num2str(numNonSelRed))),...
    'HorizontalAlignment','center','VerticalAlignment','bottom');

b2 = bar(3,[numRespGreen/numGreen numNonRespgreen/numGreen],'grouped');
b2(1,1).FaceColor = [0 0.4470 0.7410];
b2(1,2).FaceColor = [0 0.4470 0.7410] .* 0.5;
stdVal2 = mannyPropSTD(numRespGreen,numGreen);
text(b2(1,1).XEndPoints,b2(1,1).YEndPoints+stdVal2,string(strcat("n=",num2str(numRespGreen))),...
    'HorizontalAlignment','center','VerticalAlignment','bottom');
text(b2(1,2).XEndPoints,b2(1,2).YEndPoints+stdVal2,string(strcat("n=",num2str(numNonRespgreen))),...
    'HorizontalAlignment','center','VerticalAlignment','bottom');

b3 = bar(4,[numSelGreen/numRespGreen numNonSelgreen/numRespGreen],'grouped');
b3(1,1).FaceColor = [0.4660 0.6740 0.1880];
b3(1,2).FaceColor = [0.4660 0.6740 0.1880] .* 0.5;
stdVal3 = mannyPropSTD(numSelGreen,numGreen);
text(b3(1,1).XEndPoints,b3(1,1).YEndPoints+stdVal3,string(strcat("n=",num2str(numSelGreen))),...
    'HorizontalAlignment','center','VerticalAlignment','bottom');
text(b3(1,2).XEndPoints,b3(1,2).YEndPoints+stdVal3,string(strcat("n=",num2str(numNonSelgreen))),...
    'HorizontalAlignment','center','VerticalAlignment','bottom');

errorbar(b0(1,1).XEndPoints,b0(1,1).YEndPoints,mannyPropSTD(numRespRed,numRed),...
    Color=[0,0,0],LineWidth=1.4);
errorbar(b0(1,2).XEndPoints,b0(1,2).YEndPoints,mannyPropSTD(numNonRespRed,numRed),...
    Color=[0,0,0],LineWidth=1.4);

errorbar(b1(1,1).XEndPoints,b1(1,1).YEndPoints,mannyPropSTD(numSelRed,numRespRed),...
    Color=[0,0,0],LineWidth=1.4);
errorbar(b1(1,2).XEndPoints,b1(1,2).YEndPoints,mannyPropSTD(numNonSelRed,numRespRed),...
    Color=[0,0,0],LineWidth=1.4);

errorbar(b2(1,1).XEndPoints,b2(1,1).YEndPoints,mannyPropSTD(numRespGreen,numGreen),...
    Color=[0,0,0],LineWidth=1.4);
errorbar(b2(1,2).XEndPoints,b2(1,2).YEndPoints,mannyPropSTD(numNonRespgreen,numGreen),...
    Color=[0,0,0],LineWidth=1.4);

errorbar(b3(1,1).XEndPoints,b3(1,1).YEndPoints,mannyPropSTD(numSelGreen,numRespGreen),...
    Color=[0,0,0],LineWidth=1.4);
errorbar(b3(1,2).XEndPoints,b3(1,2).YEndPoints,mannyPropSTD(numNonSelgreen,numRespGreen),...
    Color=[0,0,0],LineWidth=1.4);

ax0 = gca;
ax0.XTick = [1.5 3.4];
ax0.XTickLabel = {'RFP+';'RFP-'};
ax0.YLim = [0 1];

title(titleIn);
ylabel('Percentage of Neurons')
legend({'Responsive','Non-Responsive','Selective','Non-Selective'});

end

%--------------------------------------------------------------------------

function [outRP] = locCorr(respStructs,freqList,partialCorrMap)
    % accepts:
    % 1st: a cell array of response structures
    % 2nd: an array of frequencies tested
    % 3rd: flag to return full corrMat or 1/2 size only
    % outputs a correlation matrix of the input length
    % output array 3rd dimension (Rho Val, P Val)
    outRP = zeros(size(respStructs,1),size(respStructs,1),2); %Corr matrix (R), and P Vals
    for i = 1 : size(respStructs,1) %corr matrix indx 1
        Si = respStructs{i};
        for j = i : size(respStructs,1) %corr matrix indx 2
            Sj = respStructs{j};
            numTrials = zeros(size(freqList,2),1);
            for nf = 1 : size(freqList,2) %loop through and preload array
                fHz = ['f',num2str(freqList(nf))];
                numTrials(nf) = size(Si.(fHz).avgRespPostStim,1);
            end
            iResp = zeros(sum(numTrials),1);
            jResp = zeros(sum(numTrials),1);
            for nf = 1 : size(freqList,2) %populate array with responses
                fHz = ['f',num2str(freqList(nf))];
                if nf == 1
                    indx = 1:numTrials(nf);
                else
                    indx = sum(numTrials(1:nf-1))+1:sum(numTrials(1:nf));
                end
                iResp(indx) = Si.(fHz).avgRespPostStim;
                jResp(indx) = Sj.(fHz).avgRespPostStim;
            end
            [outRP(j,i,1),outRP(j,i,2)] = corr(iResp,jResp); %fill corrMat
            if partialCorrMap == 1 % skip filling complete corr Matrix
                outRP(i,j,1) = NaN; 
                outRP(i,j,2) = NaN;
            else %fill other half of corr matrix
                [outRP(i,j,1),outRP(i,j,2)] = corr(iResp,jResp);
            end
        end
    end
%     figure;
%     imagesc(outRP(:,:,1));
%     colorbar;
end

%--------------------------------------------------------------------------

function [outRP] = locCorrPreStim(respStructs,freqList,partialCorrMap)
    % accepts:
    % 1st: a cell array of response structures
    % 2nd: an array of frequencies tested
    % 3rd: flag to return full corrMat or 1/2 size only
    % outputs a correlation matrix of the input length
    % output array 3rd dimension (Rho Val, P Val)
    outRP = zeros(size(respStructs,1),size(respStructs,1),2); %Corr matrix (R), and P Vals
    for i = 1 : size(respStructs,1) %corr matrix indx 1
        Si = respStructs{i};
        for j = i : size(respStructs,1) %corr matrix indx 2
            Sj = respStructs{j};
            numTrials = zeros(size(freqList,2),1);
            for nf = 1 : size(freqList,2) %loop through and preload array
                fHz = ['f',num2str(freqList(nf))];
                numTrials(nf) = size(Si.(fHz).avgRespPostStim,1);
            end
            iResp = zeros(sum(numTrials),1);
            jResp = zeros(sum(numTrials),1);
            for nf = 1 : size(freqList,2) %populate array with responses
                fHz = ['f',num2str(freqList(nf))];
                if nf == 1
                    indx = 1:numTrials(nf);
                else
                    indx = sum(numTrials(1:nf-1))+1:sum(numTrials(1:nf));
                end
                iResp(indx) = Si.(fHz).avgRespPostStim;
                jResp(indx) = Sj.(fHz).avgRespPostStim;
            end
            [outRP(j,i,1),outRP(j,i,2)] = corr(iResp,jResp); %fill corrMat
            if partialCorrMap == 1 % skip filling complete corr Matrix
                outRP(i,j,1) = NaN; 
                outRP(i,j,2) = NaN;
            else %fill other half of corr matrix
                [outRP(i,j,1),outRP(i,j,2)] = corr(iResp,jResp);
            end
        end
    end
%     figure;
%     imagesc(outRP(:,:,1));
%     colorbar;
end
















